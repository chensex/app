<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- web.xml中shiro的filter对应的bean -->
	<!-- Shiro 的Web过滤器 -->
	<!-- 获取properties配置文件-->
    <context:property-placeholder location="classpath:config.properties"/>
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/system/login" />
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<property name="successUrl" value="/system/main" />
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面 -->
		<property name="unauthorizedUrl" value="/system/noAuthority" />
		<!-- 自定义filter配置 -->
		<!-- <property name="filters">
			<map>
				将自定义 的FormAuthenticationFilter注入shiroFilter中
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property> -->

		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置匿名访问 -->
				/css/** = anon
				/diagram-viewer/** = anon
				/doc/** = anon
				/editor-app/** = anon
				/images/** = anon
				/jiaoben4105/** = anon
				/jquery-easyui/** = anon
				/resources/** = anon
				/system/userLoginOut = logout
				/** = authc
				<!-- 请求 userLoginOut地址，shiro去清除session -->
				<!-- /system/login = anon
				/system/main = anon
				/userLoginOut = logout -->
				<!--商品查询需要商品查询权限 ，取消url拦截配置，使用注解授权方式 -->
				<!-- /items/queryItems.action = perms[item:query] /items/editItems.action 
					= perms[item:edit] -->
				<!-- 配置记住我或认证通过可以访问的地址 -->
				<!-- /index.jsp = user
				/first.action = user
				/welcome.jsp = user -->
				<!-- /** = authc 所有url都必须认证通过才可以访问 -->
				<!-- /** = anon所有url都可以匿名访问 -->

			</value>
		</property>
	</bean>
	<!-- shiro 安全管理器，核心安全管理接口 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="customRealm" />
		<!-- 注入缓存管理器 -->
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
		<!-- 注入session管理器 -->
		<property name="sessionManager" ref="shiroSessionManager" />
		<!-- 记住我 -->
		<!-- <property name="rememberMeManager" ref="rememberMeManager" /> -->

	</bean>
	<!-- realm -->
	<bean id="customRealm" class="com.app.servlet.AuthorityRealm">
		<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	
	<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/"/>
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="1" />
	</bean>

	<!-- sessionDAO -->
	<bean id="shiroSessionDAO" class="com.app.session.SessionDao"/>
	
	<!-- sessionManager -->
	<bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionIdUrlRewritingEnabled" value="false" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="globalSessionTimeout" value="1800000"></property>
        <property name="deleteInvalidSessions" value="true"></property>
	    <property name="sessionDAO" ref="shiroSessionDAO" />
	    <property name="sessionIdCookie" ref="sharesession" />
	</bean>

	<bean id="redisManager" class="com.app.session.RedisManager"/>

	<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的name,对应的默认是 JSESSIONID -->
        <constructor-arg name="name" value="SHAREJSESSIONID"/>
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
        <property name="path" value="/"/>
        <property name="httpOnly" value="true"/>
    </bean>

	<!-- 缓存管理器 -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="redisManager" ref="redisManager"/>
	</bean> -->

	<!-- 会话管理器 -->
	<!-- <bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		session的失效时长，单位毫秒
		<property name="globalSessionTimeout" value="600000" />
		删除失效的session
		<property name="deleteInvalidSessions" value="true" />
	</bean> -->

	<!-- 自定义form认证过虑器 -->
	<!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<!-- <bean id="formAuthenticationFilter" class="自定义类全名 ">
		表单中账号的input名称
		<property name="usernameParam" value="username" />
		表单中密码的input名称
		<property name="passwordParam" value="password" />
		记住我input的名称
		<property name="rememberMeParam" value="rememberMe" />
	</bean> -->

	<!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
	<!-- <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean> -->
	<!-- 记住我cookie -->
	<!-- <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> -->
	 	<!-- rememberMe是cookie的名字 -->
		<!-- <constructor-arg value="rememberMe" /> -->
		<!-- 记住我cookie生效时间30天 -->
		<!-- <property name="maxAge" value="2592000" /> -->
	<!-- </bean> -->

</beans>