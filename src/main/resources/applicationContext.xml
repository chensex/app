<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
       
       <!-- 扫描包注册成, 如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean-->
       <context:component-scan base-package="com.app"/>
       
       <!-- 获取properties配置文件-->
       <context:property-placeholder location="classpath:config.properties"/>
       <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>
       
        <!-- 数据库配置-->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
       		<property name="driverClassName" value="${jdbc.driverClassName}"/>
	        <property name="url" value="${jdbc.url}"/>
	        <property name="username" value="${jdbc.username}"/>
	        <property name="password" value="${jdbc.password}"/>
	        <property name="maxActive" value="${jdbc.maxActive}"/>
	        <property name="initialSize" value="${jdbc.initialSize}"/>
	        <property name="maxWait" value="${jdbc.maxWait}"/>
	        <property name="minIdle" value="${jdbc.minIdle}"/>
	        <property name="maxIdle" value="${jdbc.maxIdle}"/>
	        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
	        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
	        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
	        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
	        <property name="numTestsPerEvictionRun" value="${jdbc.numTestsPerEvictionRun}"/>
	        <property name="validationQuery" value="${jdbc.validationQuery}"/>
	        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
	        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
	        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
       </bean>
       
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="typeAliasesPackage" value="com.app.model"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:mapper/**/*.xml</value>
            </list>
        </property>
        <property name="plugins">
        	<array>
				 <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                        </value>
                    </property>
                </bean>        		
        	</array>
        </property>
    </bean>
    
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.app.mapper"/>
        <property name="markerInterface" value="tk.mybatis.mapper.common.Mapper"/>
    </bean>
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    
    <!-- 任务调度工厂 -->
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>
    
    <aop:aspectj-autoproxy />
     <aop:config>
        <aop:pointcut id="appService" expression="execution(* com.app..service..*Service*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="appService"/>
    </aop:config>
 
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true" propagation="NEVER"/>
            <tx:method name="find*" read-only="true" propagation="NEVER"/>
            <tx:method name="get*" read-only="true" propagation="NEVER"/>
            <tx:method name="query*" read-only="true" propagation="NEVER"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Throwable"/>
        </tx:attributes>
    </tx:advice>
    
    <!--连接池配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
    	<property name="maxTotal" value="${redis.maxTotal}"/>
    	<property name="maxIdle" value="${redis.maxIdle}" />
    	<property name="minIdle" value="${redis.minIdle}" />
    	<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
    	<property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    
    <!--客户端连接配置 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    	<property name="hostName" value="${redis.hostName}"/>
    	<property name="port" value="${redis.port}"/>
    	<property name="password" value="${redis.password}"/>
    	<property name="timeout"  value="${redis.timeout}"/>
    	<property name="poolConfig" ref="poolConfig"/>
    </bean>
    
    <!--jedis封装类配置 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
    	<property name="connectionFactory" ref="connectionFactory"></property>
    	<!--序列化key -->
    	<property name="keySerializer">
    		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
    	</property>
    	<!--序列化value -->
    	<property name="valueSerializer">
    		<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
    	</property>
    </bean>
	
	<!-- 配置流程引擎配置信息对象 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
  		<property name="dataSource" ref="dataSource"></property>
  		<property name="transactionManager" ref="transactionManager"/>
  		<property name="databaseSchemaUpdate" value="true"/>
  		<property name="jobExecutorActivate" value="false"/>
  		<!-- 使用视图-->
  		<property name="dbIdentityUsed" value="false"/>
  		<property name="databaseType" value="mysql"/>
  		<property name="activityFontName" value="宋体"/>
  		<property name="labelFontName" value="宋体"/>
  	</bean>
  		
  		<!-- 配置流程引擎 -->	
  	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
 		<property name="processEngineConfiguration" ref="processEngineConfiguration"/>
 	</bean>
 	    
 	    <!-- 配置六个服务Bean -->
 	<!-- 工作流仓储服务 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<!-- 工作流运行服务 -->
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<!-- 工作流任务服务-->
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<!-- 工作流历史数据服务-->
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<!-- 工作流管理服务-->
	<bean id="formService" factory-bean="processEngine" factory-method="getFormService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
	<!-- 工作流唯一服务 -->
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
</beans>