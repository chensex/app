<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
         
	<display-name>app</display-name>

	<!-- Spring配置 -->
	<context-param>
    	<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:applicationContext.xml</param-value>
  	</context-param>

	<!-- 启动监听器,默认找WEB-INF/下的是否有一个文件名称为:applicationContext.xml,没有就报错，
	但在很多项目中可能会把配置文件集中管理,常见位置在:classpath下面,这样的话,你要在web.xml中在配置另外一个节点名称: 
	context-param指定applicationContext位置,启动web服务器的时候会调用监听器的上下文初始化方法,
	自动装配applicationContext的配置信息,然后去初始化Ioc容器,配置在xml文件中的bean才会初始化  -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 字符编码过滤器，过滤已/开始的所有请求 -->
	<filter>
		<filter-name>springEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      	<param-name>encoding</param-name>
     	<param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>springEncodingFilter</filter-name>
    <!-- 拦截所有请求,包括静态资源请求 -->
    <url-pattern>/*</url-pattern>
  </filter-mapping>
	
	<!-- Spring MVC配置 -->
	<servlet>
		<servlet-name>app</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>classpath:app-servlet.xml</param-value>
			</init-param>
			<!-- 启动顺序，当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet,
				当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载;
				正数的值越小，该servlet的优先级越高，应用启动时就越先加载;
				当值相同时，容器就会自己选择顺序来加载。 -->
			<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>app</servlet-name>
		 <!-- /拦截除静态资源外的所有请求,不会进入spring的DispatcherServlet类,
			 /*会 匹配*.jsp等静态资源，导致进入spring的DispatcherServlet 类，然后去寻找controller,
		 	     接着找不到对应的controller所以报错 
		 	     
		 	     当进入 controller 访问/login 时，应该返回login.jsp,跳转到login.jsp，然后进入DispatcherServlet,如果配成了/*,
		 	     会匹配到*.js，*.jsp等等，但是controller没有对应的处理方法，更别说能看到页面，就会报404错误。
		 	     当改成 / 后，servlet不会匹配到.jsp的URI，当然就能正常返回页面了
		 	     
		 	     -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- Restlet adapter, used to expose modeler functionality through REST -->
<!-- <servlet>
    <servlet-name>RestletServlet</servlet-name>
    <servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
    <init-param>
        Application class name
        <param-name>org.restlet.application</param-name>
        <param-value>org.activiti.explorer.rest.application.ExplorerRestApplication</param-value>
    </init-param>
</servlet> -->
 
<!-- Catch all service requests -->
<!-- <servlet-mapping>
    <servlet-name>RestletServlet</servlet-name>
    <url-pattern>/service/*</url-pattern>
</servlet-mapping> -->
	
	<!-- 初始化定时任务 -->
	<servlet>
		<servlet-name>initTaskInfoServlet</servlet-name>
		<servlet-class>com.app.servlet.InitTaskInfoServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- 进入登录页面 -->
	<welcome-file-list>
		<welcome-file>view/login.jsp</welcome-file>
	</welcome-file-list>
</web-app>
